//! This crate provides an interface for generically inspecting and monitoring state machines
//! generated by Frame's Rust backend. In order to use this interface, you must compile your Frame
//! spec with the `runtime_support` feature enabled.
//!
//! This crate defines two traits, `MachineInstance` and `StateInstance` that enable reflecting on
//! a running state machine. When the `runtime_support` feature is enabled, the code generated by
//! Frame will automatically implement these traits. These traits enable determining the current
//! state of a machine, provide access to variables and arguments, and enable registering callbacks
//! to be notified of transition events.
//!
//! This crate also defines several `*Info` structs that provide access to *static* information
//! about a state machine. Static information is shared among all running instances of a state
//! machine, and includes things like the names and types of declared states, variables, events,
//! and actions, as well as structural information such as possible transitions and the hierarchy
//! relationships among states. Values of these structs will be automatically generated and
//! associated with the state machine. The root `MachineInfo` struct can be obtained from the
//! `machine_info()` function associated with the generated struct for the state machine, and the
//! corresponding `*Info` struct can be obtained from each element of a running state machine via
//! an `info()` method.
//!
//! Throughout this crate (and within Frame more generally), it is assumed that in any collection
//! of elements, all elements will have unique names. For example, all states within a machine will
//! have unique names, and all variables within a particular state will have unique names. This
//! constraint does not hold among all names in the machine, however. For example, a variable in
//! state `A` may have the same name as a variable in state `B`, or have the same name as a
//! parameter in state `A`.

#[allow(dead_code)]
pub mod env;
pub mod event;
pub mod info;
pub mod live;
pub mod smcat;

pub use env::*;
pub use event::*;
pub use info::*;
pub use live::*;
