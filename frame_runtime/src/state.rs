//! This small module provides a generic interface to state types in code
//! generated by Frame.

/// A state within a state machine.
pub trait State {
    /// The name of this state.
    fn name(&self) -> &'static str;
}

#[cfg(test)]
mod tests {

    use super::*;

    enum TestState {
        A,
        B,
    }

    impl State for TestState {
        fn name(&self) -> &'static str {
            match self {
                TestState::A => "A",
                TestState::B => "B",
            }
        }
    }

    #[test]
    fn state_name() {
        assert_eq!(TestState::A.name(), "A");
        assert_eq!(TestState::B.name(), "B");
    }
}
